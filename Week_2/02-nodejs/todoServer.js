/**
You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
- Don't use any database, just store all the data in an array to store the todo list data (in-memory)
- Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

Each todo has a title and a description. The title is a string and the description is a string.
Each todo should also get an unique autogenerated id every time it is created
The expected API endpoints are defined below,
1.GET /todos - Retrieve all todo items
  Description: Returns a list of all todo items.
  Response: 200 OK with an array of todo items in JSON format.
  Example: GET http://localhost:3000/todos

2.GET /todos/:id - Retrieve a specific todo item by ID
  Description: Returns a specific todo item identified by its ID.
  Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
  Example: GET http://localhost:3000/todos/123

3. POST /todos - Create a new todo item
  Description: Creates a new todo item.
  Request Body: JSON object representing the todo item.
  Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
  Example: POST http://localhost:3000/todos
  Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }

4. PUT /todos/:id - Update an existing todo item by ID
  Description: Updates an existing todo item identified by its ID.
  Request Body: JSON object representing the updated todo item.
  Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
  Example: PUT http://localhost:3000/todos/123
  Request Body: { "title": "Buy groceries", "completed": true }

5. DELETE /todos/:id - Delete a todo item by ID
  Description: Deletes a todo item identified by its ID.
  Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
  Example: DELETE http://localhost:3000/todos/123

  - For any other route not defined in the server return 404

Testing the server - run `npm run test-todoServer` command in terminal
*/



const express = require('express');
const bodyParser = require('body-parser');
const fs = require("fs");

const app = express();
app.use(bodyParser.json());

//In-memory data store
let todos = [];

//Generate Unique ID
const generateId = () => Math.floor(Math.random() * 100000) +1;

//Function to save data to File
/*readFileSync is a synchronous method, meaning it blocks
 the execution of your program until the file has been read. */
const saveData = () => {
  fs.writeFileSync('todos.json', JSON.stringify(todos));
}
// Get all todos
app.get('/todos',(req,res)=>{
  res.json(todos);
});

//Get a specified todo by ID
app.get("/todos/:id",(req,res)=>{
  const todo = todos.find(todo => todo.id === parseInt(req.params.id));
  if(todo){
    res.json(todo);
  }else{
    res.status(404).send("Todo not found");
  }
});

//Create a new todo
app.post('/todos',(req,res)=>{
  const{title,description} = req.body;
  //If data fields are missing either of title or description !!
  if(!title || !description){
    res.status(400).send('Missing required fields');
    return;
  }
  const newTodo = { id:generateId(), title, description};
  todos.push(newTodo);
  saveData();
  res.status(201).json({id:newTodo.id});
});

// Update a todo by ID
app.put("/todos/:id",(req,res)=>{
  //Take title and description input in the body
  const {title, description} = req.body;
  //Assign existing ID to the updated data pass
  const updatedTodo = todos.find(todo => todo.id === parseInt(req.params.id));
  if(!updatedTodo){
    res.status(404).send('Todo not found');
    return;
  }
  if(title) updatedTodo.title = title;
  if(description) updatedTodo.description = description;
  saveData();
  res.status(200).send("Todo Updated")
});

// Delete a todo by ID
app.delete('/todos/:id',(req,res)=>{
  const index = todos.findIndex(todo => todo.id === parseInt(req.params.id));
  if (index === -1){
    res.status(404).send('Todo not found');
    return;
  }
  /* Splice is used to delete element from array,
  1st argument is point of start and 2nd is number of element to delete */
  todos.splice(index,1);
  saveData();
  res.status(200).send('Todo deleted');
});

app.use((req,res)=>{
  res.status(404).send('Not Found')
});

module.exports = app;
